"""
    函数：
        函数是一个被命名的、独立的、完成特定功能的一段代码，并可能给调用它的程序一个返回值。
    1、被命名的：大多数函数是有名函数
    2、独立的，完成特定功能的一段代码：函数的功能要专一，专门用于完成功能而定义
    3、返回值：当函数执行完毕后，可能调用他的程序返回一个结果（返回值）

    函数定义：
    def 函数名(参数列表):
        函数体
        return 函数返回值

    函数调用：
    函数名(参数列表)

    函数调用：函数定义时没有真正地执行，必须在函数调用时，才真正的执行。
"""

"""
    函数的说明文档的使用：
    # help(display):查看函数的说明文档（函数的解释说明信息）
"""

# =====借此将设计模式再进行学习====


print("---------------------------1、不可变对象及位置参数、关键字参数--------------------------------------")
# ======python中可更改对象与不可更改对象的区别======
"""
    不可变类型：数字、布尔、字符串、元组。（类似于c++的值传递）-------传的是值
    可变类型：列表、字典。（类似于c++的引用传递）-----传的是内存地址
    python中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。
"""
# ======位置参数与关键字参数======
"""
 位置参数：按照顺序与形参一一对应。
 关键字参数：在函数调用的时候，按照key=value的形式传入值。（指名道姓传值）
"""
num=100
def display01(a):
    """说明文档位置"""
    return 1  # 第一个return 函数会返回，后面的return不会执行
    return 2
    return print('显示"我是新定义的函数"')

def display02(b):

    """
    函数说明文档展示
    :param b 字符串参数
    :return 打印输出参数
    """
    global  num # global关键字： 函数外定义的变量，可以在函数内使用
    num=1000
    print(f'我是函数定义案例展示,输入的值为：{num}')
    return int(b)+1
def test_update_num(val):
    """
    :param val: 数值类型的参数
    :return: 改变后的全局变量num
    """
    global  num
    num=val+1
    return num

m=display01(print('密码正确登录成功'))# 打印输出
print(m)
print("__________________________________")
n=display02("222")
print(n)
print(num)
print("__________________________________")
print(test_update_num(num))
print(num)

print("---------------------------2、默认值参数--------------------------------------")
# 默认值参数：又叫缺省参数
"""
    默认值参数必须放在最后，不能放在中间。
"""
def display03(a,b=100,c="男"):
    print(a,b,c)
display03(b=22,a=11,c="女")
display03(1)

print("---------------------------3、可变长度(不定长)参数--------------------------------------")
"""
    可变长参数：
    1、可变长参数：*args
    2、可变长参数：**kwargs
    
    *代表位置参数，**代表关键词参数
"""
def display04(*args):
    print(args)
def display05(**kwargs):
    print(kwargs)

display04(1,2,3,4,5)
display05(a=1,b=2,c=3,d=4,e=5)

def foo(*list,**dict):
    print(type(list)) # <class 'tuple'>
    print(type(dict)) # <class 'dict'>

foo(1,2,3,4,5,a=3,b=2,c=3,d=4,e=5)

print("---------------------------4、lambda表达式--------------------------------------")
"""
    lambda表达式：
        ()=>{}
        lambda :     # 默认返回函数在内存中的地址
    
"""
def func1():
    return lambda a,b:a+b
func2=func1()

print(func1()(1,2))
print(func2(3,4))

print("---------------------------5、lambda表达式带匿名参数--------------------------------------")
"""
    lambda表达式带匿名参数：
        lambda 参数列表:表达式
"""
print((lambda a,b:a+b)(1,2))
print((lambda *args:sum(args))(1,2,3,4,5,6,7)) # sum()=>求和
print((lambda **kwargs:sum(kwargs.values()))(a=1,b=2,c=3,d=4,e=5,f=6,g=7))

